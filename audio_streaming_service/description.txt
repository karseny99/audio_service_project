user_service/
├── src/
│   ├── core/
│   │   ├── config/                  # Configuration (env vars, settings)
│   │   │   └── settings.py
│   │   ├── monitoring/              # Prometheus metrics
│   │   │   ├── metrics.py           # Custom metrics (KAFKA_EVENTS_PROCESSED, etc.)
│   │   │   └── middleware.py        # FastAPI middleware (if hybrid HTTP)
│   │   ├── protobuf/                # Protobuf schemas and generated code
│   │   │   ├── messages/            # .proto files
│   │   │   │   ├── user_events.proto
│   │   │   │   └── playlist_commands.proto
│   │   │   └── generated/           # Auto-generated _pb2.py files
│   │   ├── serialization.py         # Protobuf ↔ Python-Domain converters
│   │   ├── exceptions.py            # Custom exceptions
│   │   └── logger.py                # Structured logging
│   │
│   ├── domain/                      # Pure business logic
│   │   ├── users/
│   │   │   ├── models.py            # User aggregate
│   │   │   ├── value_objects/       # EmailAddress, Password, etc.
│   │   │   ├── repository.py        # UserRepository interface
│   │   │   └── services.py          # Auth logic
│   │   │
│   │   ├── playlists/
│   │   │   ├── models.py            # Playlist aggregate
│   │   │   ├── value_objects/       # PlaylistTitle, Duration
│   │   │   └── repository.py        # PlaylistRepository interface
│   │   │
│   │   └── events/                  # Event definitions
│   │       ├── commands.py          # CreatePlaylistCommand
│   │       └── events.py            # UserRegisteredEvent
│   │
│   ├── infrastructure/              # Framework-dependent code
│   │   ├── kafka/
│   │   │   ├── consumers.py         # Subscribers (deserializes protobuf)
│   │   │   └── producers.py         # Publishers (serializes protobuf)
│   │   │
│   │   ├── database/
│   │   │   ├── repositories/        # PostgreSQL implementations
│   │   │   │   ├── user_repository.py
│   │   │   │   └── playlist_repository.py
│   │   │   └── models.py           # SQLAlchemy ORM
│   │   │
│   │   └── external/               # Anti-Corruption Layer (ACL)
│   │       └── track_service.py    # gRPC client for track metadata
│   │
│   └── application/                # Use cases
│       ├── use_cases/
│       │   ├── register_user.py    # Handles UserRegisteredEvent
│       │   ├── create_playlist.py  # Processes CreatePlaylistCommand
│       │   └── ...
│       └── schemas.py              # Pydantic models (for internal use)
│
├── deploy/
│   ├── prometheus/
│   │   ├── prometheus.yml          # Scrape configs
│   │   └── alerts.yml              # Alert rules
│   ├── grafana/
│   │   ├── dashboards/
│   │   │   └── user_service.json   # Predefined dashboard
│   │   └── provisioning/
│   │       └── datasources.yml     # Prometheus connection
│   └── docker-compose.monitoring.yml  # Grafana+Prometheus stack
│
├── scripts/
│   ├── generate_protobuf.sh        # Compiles .proto → _pb2.py
│   └── migrate.py                  # Alembic migrations
│
├── tests/
│   ├── unit/
│   │   ├── domain/                 # Test aggregates/value objects
│   │   └── application/            # Test use cases
│   ├── integration/
│   │   ├── kafka/                  # Test event handlers
│   │   └── database/               # Test repositories
│   └── conftest.py                 # Pytest fixtures
│
└── main.py                         # Entrypoint (starts Kafka consumers)