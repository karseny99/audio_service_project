services:
  postgres:
    image: postgres:17-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: 1
      POSTGRES_DB: audio_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL","pg_isready -U user -d audio_db"]
      interval: 5s
      retries: 5

  db-init:
    image: postgres:17-alpine
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGPASSWORD: "1"
    volumes:
      - ./ddl.sql:/ddl.sql:ro
    entrypoint:
      - sh
      - -c
      - |
        echo "Applying DDL to audio_db…"
        psql -h postgres -U user -d audio_db -f /ddl.sql
        echo "DDL applied."

  zookeeper:
    image: bitnami/zookeeper:3.9
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
      ZOO_SERVER_ID: 1
      ZOO_SERVERS: "zookeeper:2888:3888"
      ZOO_4LW_COMMANDS_WHITELIST: "mntr,ruok"
    volumes:
      - zookeeper_data:/bitnami
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181 | grep imok || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 20
      start_period: 30s

  kafka:
    image: bitnami/kafka:3.4
    hostname: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_CFG_ADVERTISED_LISTENERS: "INTERNAL://kafka:9092,EXTERNAL://localhost:29092"
      KAFKA_CFG_LISTENERS: "INTERNAL://:9092,EXTERNAL://:29092"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_BROKER_ID: 1
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
      KAFKA_CFG_GROUP_INITIAL_REBALANCE_DELAY_MS: "0"
      KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: "1"
    volumes:
      - kafka_data:/bitnami
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: |
        kafka-topics.sh --bootstrap-server kafka:9092 --list && \
        kafka-consumer-groups.sh --bootstrap-server kafka:9092 --list
      interval: 15s
      timeout: 30s
      retries: 20
      start_period: 60s


  kafka-init:
    image: bitnami/kafka:3.4
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./init-kafka-topics.sh:/init-kafka-topics.sh
    entrypoint: ["/bin/bash", "/init-kafka-topics.sh"]


  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8082:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: "local"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:9092"
      KAFKA_CLUSTERS_0_ZOOKEEPER: "zookeeper:2181"
    depends_on:
      - kafka


  redis:
    image: redis:7.0-alpine
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=1
      - REDIS_USERNAME=admin
    command: ["--requirepass 1"]
    volumes:
      - redis_data:/data
    healthcheck:                    # '1' is password
      test: ["CMD", "redis-cli", "-a", "1", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30
  
  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus

  db-restore:
    image: postgres:17-alpine
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGPASSWORD: "1"
    volumes:
      - ./music_service.dump:/music_service.dump:ro
    command: >
      sh -c 'pg_restore -h postgres -U user -d audio_db --clean --if-exists /music_service.dump'
    
  minio:
    image: minio/minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: admin  # Логин
      MINIO_ROOT_PASSWORD: password  # Пароль
    ports:
      - "9000:9000"  # S3 API
      - "9001:9001"  # Web UI
    volumes:
      - minio_data:/data
    networks:
      - minio_net

  init-minio:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc alias set minio http://minio:9000 admin password) do echo 'Waiting for MinIO...'; sleep 1; done &&
      /usr/bin/mc mb minio/tracks || true &&
      /usr/bin/mc anonymous set public minio/tracks || true
      "
    networks:
      - minio_net

volumes:
  zookeeper_data:
  kafka_data:
  postgres_data:
  redis_data:
  minio_data:

networks:
  minio_net:
    driver: bridge